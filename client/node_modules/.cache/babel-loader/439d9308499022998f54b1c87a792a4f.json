{"ast":null,"code":"import decode from \"jwt-decode\";\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    // axios.defaults.headers.common[\"Authorization\"] = null;\n    localStorage.removeItem(\"id_token\"); // this will reload the page and reset the state of the application\n\n    window.location.assign(\"/\");\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem"],"sources":["/Users/patrickciongoli/Desktop/pc-projects/DC_BLOG/psychic-sniffle/client/src/utils/auth.js"],"sourcesContent":["import decode from \"jwt-decode\";\n\nclass AuthService {\n   getProfile() {\n      return decode(this.getToken());\n   }\n\n   loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      const token = this.getToken();\n      return !!token && !this.isTokenExpired(token); // handwaiving here\n   }\n\n   isTokenExpired(token) {\n      try {\n         const decoded = decode(token);\n         if (decoded.exp < Date.now() / 1000) {\n            return true;\n         } else return false;\n      } catch (err) {\n         return false;\n      }\n   }\n\n   getToken() {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem(\"id_token\");\n   }\n\n   login(idToken) {\n      // Saves user token to localStorage\n      localStorage.setItem(\"id_token\", idToken);\n\n      window.location.assign(\"/\");\n   }\n\n   logout() {\n      // Clear user token and profile data from localStorage\n      // axios.defaults.headers.common[\"Authorization\"] = null;\n      localStorage.removeItem(\"id_token\");\n      // this will reload the page and reset the state of the application\n      window.location.assign(\"/\");\n   }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;;AAEA,MAAMC,WAAN,CAAkB;EACfC,UAAU,GAAG;IACV,OAAOF,MAAM,CAAC,KAAKG,QAAL,EAAD,CAAb;EACF;;EAEDC,QAAQ,GAAG;IACR;IACA,MAAMC,KAAK,GAAG,KAAKF,QAAL,EAAd;IACA,OAAO,CAAC,CAACE,KAAF,IAAW,CAAC,KAAKC,cAAL,CAAoBD,KAApB,CAAnB,CAHQ,CAGuC;EACjD;;EAEDC,cAAc,CAACD,KAAD,EAAQ;IACnB,IAAI;MACD,MAAME,OAAO,GAAGP,MAAM,CAACK,KAAD,CAAtB;;MACA,IAAIE,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;QAClC,OAAO,IAAP;MACF,CAFD,MAEO,OAAO,KAAP;IACT,CALD,CAKE,OAAOC,GAAP,EAAY;MACX,OAAO,KAAP;IACF;EACH;;EAEDR,QAAQ,GAAG;IACR;IACA,OAAOS,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAP;EACF;;EAEDC,KAAK,CAACC,OAAD,EAAU;IACZ;IACAH,YAAY,CAACI,OAAb,CAAqB,UAArB,EAAiCD,OAAjC;IAEAE,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;EACF;;EAEDC,MAAM,GAAG;IACN;IACA;IACAR,YAAY,CAACS,UAAb,CAAwB,UAAxB,EAHM,CAIN;;IACAJ,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;EACF;;AAxCc;;AA2ClB,eAAe,IAAIlB,WAAJ,EAAf"},"metadata":{},"sourceType":"module"}