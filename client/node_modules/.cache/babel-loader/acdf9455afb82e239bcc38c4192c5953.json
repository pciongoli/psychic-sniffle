{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nconst isLocalhost = Boolean(window.location.hostname === \"localhost\" || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === \"[::1]\" || // 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://bit.ly/CRA-PWA\");\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log(\"New content is available and will be used when all \" + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log(\"Content is cached for offline use.\"); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error(\"Error during service worker registration:\", error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      \"Service-Worker\": \"script\"\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get(\"content-type\");\n\n    if (response.status === 404 || contentType != null && contentType.indexOf(\"javascript\") === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log(\"No internet connection found. App is running in offline mode.\");\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["/Users/patrickciongoli/Desktop/pc-projects/DC_BLOG/psychic-sniffle/client/src/serviceWorker.js"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n   window.location.hostname === \"localhost\" ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === \"[::1]\" ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n         /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n);\n\nexport function register(config) {\n   if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n         // Our service worker won't work if PUBLIC_URL is on a different origin\n         // from what our page is served on. This might happen if a CDN is used to\n         // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n         return;\n      }\n\n      window.addEventListener(\"load\", () => {\n         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n         if (isLocalhost) {\n            // This is running on localhost. Let's check if a service worker still exists or not.\n            checkValidServiceWorker(swUrl, config);\n\n            // Add some additional logging to localhost, pointing developers to the\n            // service worker/PWA documentation.\n            navigator.serviceWorker.ready.then(() => {\n               console.log(\n                  \"This web app is being served cache-first by a service \" +\n                     \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n               );\n            });\n         } else {\n            // Is not localhost. Just register service worker\n            registerValidSW(swUrl, config);\n         }\n      });\n   }\n}\n\nfunction registerValidSW(swUrl, config) {\n   navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n         registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n               return;\n            }\n            installingWorker.onstatechange = () => {\n               if (installingWorker.state === \"installed\") {\n                  if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     console.log(\n                        \"New content is available and will be used when all \" +\n                           \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                     );\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                        config.onUpdate(registration);\n                     }\n                  } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     console.log(\"Content is cached for offline use.\");\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                        config.onSuccess(registration);\n                     }\n                  }\n               }\n            };\n         };\n      })\n      .catch((error) => {\n         console.error(\"Error during service worker registration:\", error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n   // Check if the service worker can be found. If it can't reload the page.\n   fetch(swUrl, {\n      headers: { \"Service-Worker\": \"script\" },\n   })\n      .then((response) => {\n         // Ensure service worker exists, and that we really are getting a JS file.\n         const contentType = response.headers.get(\"content-type\");\n         if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf(\"javascript\") === -1)\n         ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then((registration) => {\n               registration.unregister().then(() => {\n                  window.location.reload();\n               });\n            });\n         } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n         }\n      })\n      .catch(() => {\n         console.log(\n            \"No internet connection found. App is running in offline mode.\"\n         );\n      });\n}\n\nexport function unregister() {\n   if (\"serviceWorker\" in navigator) {\n      navigator.serviceWorker.ready\n         .then((registration) => {\n            registration.unregister();\n         })\n         .catch((error) => {\n            console.error(error.message);\n         });\n   }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}